#pragma once

#include <vector>
#include <string>
#include <ctime>
#include <sstream>
#include "SHA512.h"
#include "TraceableRingSignature.h"
#include "Node.h"


class Wallet {
private:
	// Constants - this is the public data used to generate the public keys (changing these influences difficulty to crack)
	const int primeModulus = 2147483647;		// Large prime number (max for int type) - used in the Diffie Hellman Exchange
	const int generator = 3;					// Used with the primeModulus to implement the Diffie Hellman Exchange

	// Counters
	int transactionCounter = 0;		// The number of transactions the wallet has completed
	int validationCounter = 0;		// The number of blocks/transaction that the node linked to this wallet has validated

	// Inputted Data
	std::string username;		// The wallet username - used in the creation of the Private Key
	std::string password;		// The wallet password - used in the creation of the Private Key
	std::time_t timestamp;		// The time the wallet was created - used in the creation of the Private Key

	Node node;					// Every wallet acts as a node
	double balance;				// The balance of the wallet - starts at 0 when the wallet is generated
	std::string privateKey;		// The private key - generated by hashing the username, password and timestamp
	std::string publicKey;		// The public key - generated by hashing the privateKey with readily available public data

	void generatePrivateKey();	// Private Key is generated from password, timestamp and username
	void generatePublicKey();	// Public Key is generated from the private key combined with readily available public data on the Blockchain
	
public:
	Wallet(time_t t, std::string user, std::string pass);

	void sendTransaction(double amount, std::size_t receiverAddress);	// Transfers balance from wallet to wallet on the blockchain through the use of Traceable Ring Signatures

	// Getters
	int getTransactionCounter();
	int getValidationCounter();
	std::string getPublicKey();
};
